// src/pages/Learning/courses/NetworkPentesting.jsx
import { useState } from "react";
import { motion } from "framer-motion";
import { Link } from "react-router-dom";
import { useAuth } from "../../../context/AuthContext";
import { 
  ArrowLeft, Play, Clock, FileText, CheckCircle, 
  Lock, Star, Users, Trophy, Zap, Shield,
  Video, Network, Search, Wifi
} from "lucide-react";

export default function NetworkPentesting() {
  const { user, isAuthenticated } = useAuth();
  const [completedLessons, setCompletedLessons] = useState([]);

  const courseData = {
    title: "Network Penetration Testing",
    description: "Master network scanning, enumeration, exploitation techniques and learn to secure network infrastructure.",
    instructor: "Sarah Johnson",
    duration: "6 hours",
    lessons: 20,
    level: "Intermediate",
    rating: 4.7,
    students: 890,
    xp: 350,
    lastUpdated: "2024-02-01",
    youtubeUrl: "https://youtube.com/playlist?list=PL_sample2"
  };

  const lessons = [
    {
      id: 1,
      title: "Network Reconnaissance",
      duration: "20 min",
      type: "video",
      youtubeId: "dQw4w9WgXcQ",
      completed: completedLessons.includes(1),
      description: "Discovering network hosts and services"
    },
    {
      id: 2,
      title: "Port Scanning Techniques",
      duration: "25 min",
      type: "video",
      youtubeId: "dQw4w9WgXcQ",
      completed: completedLessons.includes(2),
      description: "Mastering Nmap and advanced scanning methods"
    },
    {
      id: 3,
      title: "Vulnerability Assessment",
      duration: "30 min",
      type: "video", 
      youtubeId: "dQw4w9WgXcQ",
      completed: completedLessons.includes(3),
      description: "Identifying and analyzing network vulnerabilities"
    },
    {
      id: 4,
      title: "Exploitation Fundamentals",
      duration: "35 min",
      type: "video",
      youtubeId: "dQw4w9WgXcQ",
      completed: completedLessons.includes(4),
      description: "Gaining access to vulnerable systems"
    }
  ];

  const toggleLessonComplete = (lessonId) => {
    if (completedLessons.includes(lessonId)) {
      setCompletedLessons(completedLessons.filter(id => id !== lessonId));
    } else {
      setCompletedLessons([...completedLessons, lessonId]);
    }
  };

  const progress = (completedLessons.length / lessons.length) * 100;

  return (
    <div className="min-h-screen py-8 px-4 pt-24">
      {/* Background */}
      <div className="fixed inset-0 pointer-events-none">
        <div className="absolute top-1/4 right-1/4 w-96 h-96 bg-purple-500/3 rounded-full blur-3xl"></div>
        <div className="absolute bottom-1/4 left-1/4 w-80 h-80 bg-pink-500/3 rounded-full blur-3xl"></div>
      </div>

      <div className="max-w-6xl mx-auto relative z-10">
        {/* Header */}
        <motion.div 
          className="flex items-center gap-4 mb-8"
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
        >
          <Link to="/learning" className="glass card-cyber p-3 rounded-lg hover:bg-cyan-500/20 transition-colors">
            <ArrowLeft className="w-5 h-5 text-cyan-400" />
          </Link>
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-gradient">{courseData.title}</h1>
            <p className="text-gray-400">{courseData.description}</p>
          </div>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Video Player */}
            <motion.div 
              className="glass card-cyber p-6 border border-purple-500/30"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
            >
              <div className="aspect-video bg-black rounded-lg flex items-center justify-center relative">
                <div className="text-center">
                  <Video className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-400">Video player will be embedded here</p>
                  <a 
                    href={courseData.youtubeUrl} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2 mt-4 px-4 py-2 bg-red-500/20 text-red-400 rounded-lg hover:bg-red-500/30 transition-colors"
                  >
                    <Play className="w-4 h-4" />
                    Watch on YouTube
                  </a>
                </div>
              </div>
            </motion.div>

            {/* Lessons List */}
            <motion.div 
              className="glass card-cyber p-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
            >
              <h2 className="text-2xl font-semibold text-white mb-4">Course Lessons</h2>
              <div className="space-y-3">
                {lessons.map((lesson, index) => (
                  <motion.div
                    key={lesson.id}
                    className={`flex items-center gap-4 p-4 rounded-lg border transition-all duration-300 ${
                      lesson.completed 
                        ? "bg-green-500/10 border-green-500/30" 
                        : "bg-gray-800/30 border-gray-700/50 hover:border-purple-500/30"
                    }`}
                    whileHover={{ x: 5 }}
                  >
                    <div className="flex items-center gap-3 flex-1">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        lesson.completed ? 'bg-green-500/20' : 'bg-purple-500/20'
                      }`}>
                        {lesson.completed ? (
                          <CheckCircle className="w-4 h-4 text-green-400" />
                        ) : (
                          <Play className="w-4 h-4 text-purple-400" />
                        )}
                      </div>
                      <div className="flex-1">
                        <h3 className="text-white font-semibold">{lesson.title}</h3>
                        <p className="text-gray-400 text-sm">{lesson.description}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-4">
                      <span className="text-gray-400 text-sm flex items-center gap-1">
                        <Clock className="w-4 h-4" />
                        {lesson.duration}
                      </span>
                      {isAuthenticated && (
                        <button
                          onClick={() => toggleLessonComplete(lesson.id)}
                          className={`p-2 rounded-lg transition-colors ${
                            lesson.completed 
                              ? 'bg-green-500/20 text-green-400 hover:bg-green-500/30' 
                              : 'bg-gray-700/50 text-gray-400 hover:bg-purple-500/20 hover:text-purple-400'
                          }`}
                        >
                          {lesson.completed ? 'Completed' : 'Mark Complete'}
                        </button>
                      )}
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Course Info */}
            <motion.div 
              className="glass card-cyber p-6"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.4 }}
            >
              <h3 className="text-lg font-semibold text-white mb-4">Course Information</h3>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-400">Instructor:</span>
                  <span className="text-cyan-400">{courseData.instructor}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Duration:</span>
                  <span className="text-cyan-400">{courseData.duration}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Lessons:</span>
                  <span className="text-cyan-400">{courseData.lessons}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Level:</span>
                  <span className="text-yellow-400">{courseData.level}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Rating:</span>
                  <span className="text-yellow-400 flex items-center gap-1">
                    <Star className="w-4 h-4 fill-current" />
                    {courseData.rating}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Students:</span>
                  <span className="text-purple-400">{courseData.students.toLocaleString()}</span>
                </div>
              </div>
            </motion.div>

            {/* Progress */}
            <motion.div 
              className="glass card-cyber p-6"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.5 }}
            >
              <h3 className="text-lg font-semibold text-white mb-4">Your Progress</h3>
              <div className="space-y-4">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-400">Progress</span>
                  <span className="text-cyan-400">{Math.round(progress)}%</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div 
                    className="h-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 transition-all duration-500"
                    style={{ width: `${progress}%` }}
                  />
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-400">Completed</span>
                  <span className="text-green-400">{completedLessons.length}/{lessons.length}</span>
                </div>
                <div className="flex items-center gap-2 text-yellow-400 text-sm">
                  <Trophy className="w-4 h-4" />
                  <span>{courseData.xp} XP available</span>
                </div>
              </div>
            </motion.div>

            {/* Resources */}
            <motion.div 
              className="glass card-cyber p-6"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.6 }}
            >
              <h3 className="text-lg font-semibold text-white mb-4">Resources</h3>
              <div className="space-y-2">
                <a href="#" className="flex items-center gap-2 text-cyan-400 hover:text-cyan-300 transition-colors">
                  <FileText className="w-4 h-4" />
                  Network Scanning Guide
                </a>
                <a href="#" className="flex items-center gap-2 text-cyan-400 hover:text-cyan-300 transition-colors">
                  <Network className="w-4 h-4" />
                  Lab Environment Setup
                </a>
                <a href="#" className="flex items-center gap-2 text-cyan-400 hover:text-cyan-300 transition-colors">
                  <Search className="w-4 h-4" />
                  Vulnerability Database
                </a>
              </div>
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
}